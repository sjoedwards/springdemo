package com.sjoedwards.springdemo.aspect;

import java.util.logging.Logger;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class CRMLoggingAspect {
	// setup logger
	private Logger myLogger = Logger.getLogger(getClass().getName());

	// setup pointcut declarations
	@Pointcut("execution(* com.sjoedwards.springdemo.aspect.*.*(..))")
	private void forControllerPackage() {
	}

	// do the same thing for service and dao
	@Pointcut("execution(* com.sjoedwards.springdemo.service.*.*(..))")
	private void forServicePackage() {
	}

	@Pointcut("execution(* com.sjoedwards.springdemo.dao.*.*(..))")
	private void forDaoPackage() {
	}

	@Pointcut("forControllerPackage() || forServicePackage() || forDaoPackage()")
	private void forAppFlow() {

	}

	// add @Before advice
	@Before("forAppFlow()")
	public void before(JoinPoint theJoinPoint) {
		// display method being called
		String theMethod = theJoinPoint.getSignature().toShortString();
		myLogger.info("====> in @Before: calling method" + theMethod);
		
		// display arguments to the method
		
		// get the arguments 
		Object[] args = theJoinPoint.getArgs();
		
		// loop through and dispaly the args
		for(Object tempArg: args) {
			myLogger.info("====> argument" + tempArg);
		}

	}

	// add @AfterReturning advice
}
